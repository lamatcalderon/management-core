{"version":3,"file":"index.js","sources":["../src/shared/infraestructure/adapter/out/rest-axios.adapter.ts","../src/shared/application/container/container-out-port.util.ts","../src/customers/application/use-case/create-customer.use-case.ts","../src/customers/application/use-case/delete-customer.use-case.ts","../src/customers/application/use-case/get-customer.use-case.ts","../src/customers/application/use-case/list-customer.use-case.ts","../src/customers/application/use-case/update-customer.use-case.ts","../src/customers/application/conteiner/container-use-case.container.ts","../src/customers/infraestructure/adapter/in/service/customer.service.ts"],"sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\n\nimport { RestPort } from \"../../port/out/rest.port\";\n\nexport const instance = axios.create({\n    baseURL: \"http://localhost:8083\",\n});\n\n\n/*instance.interceptors.request.use(\n    (config) => {\n        return config;\n    },\n    (err) => {\n        Promise.reject(err);\n    }\n);\n\ninstance.interceptors.response.use(\n    (response) => {\n        return response.data;\n    },\n    (error) => {\n        console.log(error.response.data)\n        console.log(error.response.status)\n        return Promise.reject(error);\n    }\n);*/\n\nexport class RestAxios implements RestPort {\n\n    private static instance: RestAxios;\n\n    private constructor() { }\n\n    static getInstance(): RestAxios {\n        if (!RestAxios.instance) {\n            RestAxios.instance = new RestAxios();\n        }\n        return RestAxios.instance;\n    }\n\n    get<T>(path: string): Promise<T[]> {\n        return instance.get(path);\n    }\n    post<T>(path: string, entity: T): Promise<T> {\n        return instance.post(path, entity);\n    }\n    delete<T>(path: string): Promise<any> {\n        return instance.delete(path);\n    }\n    put<T>(path: string, entity: T): Promise<any> {\n        return instance.put(path, entity);\n    }\n}\n\nexport default axios;","import { RestPort } from '../../infraestructure/port/out/rest.port';\nimport { RestAxios } from '../../infraestructure/adapter/out/rest-axios.adapter';\n\nlet restAxiosInstance: RestPort | null = null;\n\nexport function getRestAxiosPort(): RestPort {\n    if (!restAxiosInstance) {\n        restAxiosInstance = RestAxios.getInstance();\n    }\n    return restAxiosInstance;\n}","import { CreateCustomerPort } from \"../../infraestructure/port/in/create-customer.port\";\nimport { Customer } from \"../../domain/customer.domain\";\n\nimport { RestPort } from \"../../../shared/infraestructure/port/out/rest.port\";\nimport { getRestAxiosPort } from \"../../../shared/application/container/container-out-port.util\";\n\nexport class CreateCustomerUseCase implements CreateCustomerPort {\n\n    private static instance: CreateCustomerUseCase;\n    private restPort: RestPort = getRestAxiosPort(); \n\n    private constructor() { }\n\n    static getInstance(): CreateCustomerUseCase {\n        if (!CreateCustomerUseCase.instance) {\n            CreateCustomerUseCase.instance = new CreateCustomerUseCase();\n        }\n        return CreateCustomerUseCase.instance;\n    }\n\n    createCustomer(customer: Customer): Promise<Customer> {      \n        return this.restPort.post(\"/v1/customer\", customer);\n    }\n}","import { DeleteCustomerPort } from \"../../infraestructure/port/in/delete-customer.port\";\nimport { Customer } from \"../../domain/customer.domain\";\n\nimport { RestPort } from \"../../../shared/infraestructure/port/out/rest.port\";\nimport { getRestAxiosPort } from \"../../../shared/application/container/container-out-port.util\";\n\nexport class DeleteCustomerUseCase implements DeleteCustomerPort {\n\n    private static instance: DeleteCustomerUseCase;\n    private restPort: RestPort = getRestAxiosPort(); \n\n    private constructor() { }\n\n    static getInstance(): DeleteCustomerUseCase {\n        if (!DeleteCustomerUseCase.instance) {\n            DeleteCustomerUseCase.instance = new DeleteCustomerUseCase();\n        }\n        return DeleteCustomerUseCase.instance;\n    }\n\n    deleteCustomer(id: number): Promise<Customer> {        \n        return this.restPort.delete(`/v1/customer/${id}`);\n    }\n}","import { Customer } from \"../../domain/customer.domain\";\n\nimport { RestPort } from \"../../../shared/infraestructure/port/out/rest.port\";\nimport { getRestAxiosPort } from \"../../../shared/application/container/container-out-port.util\";\nimport { GetCustomerPort } from \"@/customers/infraestructure/port/in/get-customer.port\";\n\nexport class GetCustomerUseCase implements GetCustomerPort {\n\n    private static instance: GetCustomerUseCase;\n    private restPort: RestPort = getRestAxiosPort(); \n\n    private constructor() { }\n\n    static getInstance(): GetCustomerUseCase {\n        if (!GetCustomerUseCase.instance) {\n            GetCustomerUseCase.instance = new GetCustomerUseCase();\n        }\n        return GetCustomerUseCase.instance;\n    }\n\n    getCustomer(id: number): Promise<Customer[]> {\n        return this.restPort.get(`/v1/customer/${id}`);\n    }\n}","import { Customer } from \"../../domain/customer.domain\";\n\nimport { RestPort } from \"../../../shared/infraestructure/port/out/rest.port\";\nimport { getRestAxiosPort } from \"../../../shared/application/container/container-out-port.util\";\nimport { ListCustomerPort } from \"@/customers/infraestructure/port/in/list-customer.port\";\n\nexport class ListCustomerUseCase implements ListCustomerPort {\n\n    private static instance: ListCustomerUseCase;\n    private restPort: RestPort = getRestAxiosPort(); \n\n    private constructor() { }\n\n    static getInstance(): ListCustomerUseCase {\n        if (!ListCustomerUseCase.instance) {\n            ListCustomerUseCase.instance = new ListCustomerUseCase();\n        }\n        return ListCustomerUseCase.instance;\n    }\n\n    listCustomer(): Promise<Customer[]> {\n        return this.restPort.get(\"/v1/customer\");\n    }\n}","import { UpdateCustomerPort } from \"../../infraestructure/port/in/update-customer.port\";\nimport { Customer } from \"../../domain/customer.domain\";\n\nimport { RestPort } from \"../../../shared/infraestructure/port/out/rest.port\";\nimport { getRestAxiosPort } from \"../../../shared/application/container/container-out-port.util\";\n\nexport class UpdateCustomerUseCase implements UpdateCustomerPort {\n\n    private static instance: UpdateCustomerUseCase;\n    private restPort: RestPort = getRestAxiosPort(); \n\n    private constructor() { }\n\n    static getInstance(): UpdateCustomerUseCase {\n        if (!UpdateCustomerUseCase.instance) {\n            UpdateCustomerUseCase.instance = new UpdateCustomerUseCase();\n        }\n        return UpdateCustomerUseCase.instance;\n    }\n\n    updateCustomer(customer: Customer): Promise<Customer> {        \n        return this.restPort.put(\"/v1/customer\", customer);\n    }\n}","import { CreateCustomerPort } from '../../infraestructure/port/in/create-customer.port';\nimport { DeleteCustomerPort } from '../../infraestructure/port/in/delete-customer.port';\nimport { GetCustomerPort } from '../../infraestructure/port/in/get-customer.port';\nimport { ListCustomerPort } from '../../infraestructure/port/in/list-customer.port';\nimport { UpdateCustomerPort } from '../../infraestructure/port/in/update-customer.port';\n\nimport { CreateCustomerUseCase } from '../use-case/create-customer.use-case';\nimport { DeleteCustomerUseCase } from '../use-case/delete-customer.use-case';\nimport { GetCustomerUseCase } from '../use-case/get-customer.use-case';\nimport { ListCustomerUseCase } from '../use-case/list-customer.use-case';\nimport { UpdateCustomerUseCase } from '../use-case/update-customer.use-case';\n\nlet createCustomerUseCaseInstance: CreateCustomerPort | null = null;\nlet listCustomerUseCaseInstance: ListCustomerPort | null = null;\nlet updateCustomerUseCaseInstance: UpdateCustomerPort | null = null;\nlet deleteCustomerUseCaseInstance: DeleteCustomerPort | null = null;\nlet getCustomerUseCaseInstance: GetCustomerPort | null = null;\n\nexport function iCreateCustomerPort(): CreateCustomerPort {\n    if (!createCustomerUseCaseInstance) {\n        createCustomerUseCaseInstance = CreateCustomerUseCase.getInstance();\n    }\n    return createCustomerUseCaseInstance;\n}\n\nexport function iListCustomerPort(): ListCustomerPort {\n    if (!listCustomerUseCaseInstance) {\n        listCustomerUseCaseInstance = ListCustomerUseCase.getInstance();\n    }\n    return listCustomerUseCaseInstance;\n}\n\nexport function iUpdateCustomerPort(): UpdateCustomerPort {\n    if (!updateCustomerUseCaseInstance) {\n        updateCustomerUseCaseInstance = UpdateCustomerUseCase.getInstance();\n    }\n    return updateCustomerUseCaseInstance;\n}\n\nexport function iDeleteCustomerPort(): DeleteCustomerPort {\n    if (!deleteCustomerUseCaseInstance) {\n        deleteCustomerUseCaseInstance = DeleteCustomerUseCase.getInstance();\n    }\n    return deleteCustomerUseCaseInstance;\n}\n\nexport function iGetCustomerPort(): GetCustomerPort {\n    if (!getCustomerUseCaseInstance) {\n        getCustomerUseCaseInstance = GetCustomerUseCase.getInstance();\n    }\n    return getCustomerUseCaseInstance;\n}","import { Customer } from \"../../../../domain/customer.domain\";\nimport { \n    iCreateCustomerPort,\n    iDeleteCustomerPort,\n    iGetCustomerPort,\n    iListCustomerPort, \n    iUpdateCustomerPort \n} from \"../../../../application/conteiner/container-use-case.container\";\n\nimport { CreateCustomerPort } from \"../../../port/in/create-customer.port\";\nimport { DeleteCustomerPort } from \"../../../port/in/delete-customer.port\";\nimport { GetCustomerPort } from \"../../../port/in/get-customer.port\";\nimport { ListCustomerPort } from \"../../../port/in/list-customer.port\";\nimport { UpdateCustomerPort } from \"../../../port/in/update-customer.port\";\n\nexport const createCustomer = (customer: Customer) => {\n    const createCustomerPort: CreateCustomerPort = iCreateCustomerPort();\n    return createCustomerPort.createCustomer(customer);\n}\n\nexport const listCustomer = () => {\n    const listCustomerPort: ListCustomerPort = iListCustomerPort();\n    return listCustomerPort.listCustomer();\n}\n\nexport const updateCustomer = (customer: Customer) => {\n    const updateCustomerPort: UpdateCustomerPort = iUpdateCustomerPort();\n    return updateCustomerPort.updateCustomer(customer);\n}\n\nexport const deleteCustomer = (id: number) => {\n    const deleteCustomerPort: DeleteCustomerPort = iDeleteCustomerPort();\n    return deleteCustomerPort.deleteCustomer(id);\n}\n\nexport const getCustomer = (id: number) => {\n    const getCustomerPort: GetCustomerPort = iGetCustomerPort();\n    return getCustomerPort.getCustomer(id);\n}"],"names":["axios"],"mappings":"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"}